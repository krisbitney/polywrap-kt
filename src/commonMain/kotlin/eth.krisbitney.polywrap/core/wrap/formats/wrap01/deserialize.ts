/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/deserialize-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/deserialize-ts.mustache,
 * and run ts-node ./scripts/generateWrapManifestTypes.ts to regenerate this file.
 */

import {
  WrapManifest,
  AnyWrapManifest,
  migrateWrapManifest,
  validateWrapManifest,
  latestWrapManifestVersion,
} from ".";
import { DeserializeManifestOptions } from "../../";

import { msgpackDecode } from "@polywrap/msgpack-js";
import * as Semver from "semver";

export async function deserializeWrapManifest(
  manifest: Uint8Array,
  options?: DeserializeManifestOptions
): Promise<WrapManifest> {
  let anyWrapManifest: AnyWrapManifest | undefined;
  try {
    anyWrapManifest = msgpackDecode(manifest, true) as AnyWrapManifest;
  } catch (e) {
    throw Error(`Unable to parse WrapManifest: ${`[${new Uint8Array(manifest).toString()}]`}`);
  }

  if (!options || !options.noValidate) {
    await validateWrapManifest(anyWrapManifest);
  }

  const versionCompare = Semver.compare(
    Semver.coerce(anyWrapManifest.version) || anyWrapManifest.version,
    Semver.coerce(latestWrapManifestVersion) || latestWrapManifestVersion
  );

  if (versionCompare === -1) {
    // Upgrade
    return migrateWrapManifest(anyWrapManifest, latestWrapManifestVersion);
  } else if (versionCompare === 1) {
    // Downgrade
    throw Error(
      `Cannot downgrade WrapManifest version ${anyWrapManifest.version}, please upgrade your WRAP package.`
    );
  } else {
    // Latest
    return anyWrapManifest as WrapManifest;
  }
}
